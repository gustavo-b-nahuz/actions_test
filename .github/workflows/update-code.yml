name: Sync Specific Files to playwright-test (via API)

on:
    push:
        paths:
            - folder/test.py
            - folder/test2.py
    pull_request:
        types: [closed]
        paths:
            - folder/test.py
            - folder/test2.py
    workflow_dispatch:

permissions:
    contents: read # leitura basta; a escrita será pelo token de secret

jobs:
    sync-files:
        runs-on: ubuntu-latest

        steps:
            - name: Install GitHub CLI
              uses: cli/cli@v2 # garante versão estável do gh

            - name: Authenticate gh cli
              env:
                  GH_TOKEN: ${{ secrets.TOKEN_GITHUB }}
              run: gh auth setup-git --hostname github.com

            - name: Update files in playwright-test via REST API
              env:
                  GH_TOKEN: ${{ secrets.TOKEN_GITHUB }}
              run: |
                  set -euo pipefail

                  TARGET_REPO="gustavo-b-nahuz/playwright-test"
                  BRANCH="main"

                  declare -a FILES=("test.py" "test2.py")

                  for FILE in "${FILES[@]}"; do
                    # 1. Baixa o conteúdo mais recente do arquivo-fonte
                    SRC_RAW="https://raw.githubusercontent.com/gustavo-b-nahuz/actions_test/main/folder/${FILE}"
                    CONTENT_BASE64=$(curl -sSL "$SRC_RAW" | base64 -w0)

                    # 2. Descobre o SHA atual do arquivo no repositório-destino (se existir)
                    SHA=""
                    if gh api repos/${TARGET_REPO}/contents/${FILE}?ref=${BRANCH} --jq .sha > /dev/null 2>&1; then
                      SHA=$(gh api repos/${TARGET_REPO}/contents/${FILE}?ref=${BRANCH} --jq .sha)
                    fi

                    # 3. Envia PUT /contents – cria ou atualiza
                    echo "⤴️  Enviando ${FILE} para ${TARGET_REPO} (${BRANCH})"
                    gh api repos/${TARGET_REPO}/contents/${FILE} \
                      --method PUT \
                      -f message="Sync: $( [ -z "$SHA" ] && echo 'add' || echo 'update' ) ${FILE} from actions_test" \
                      -f content="$CONTENT_BASE64" \
                      -f branch="$BRANCH" \
                      $( [ -n "$SHA" ] && echo -f sha="$SHA" )
                  done
